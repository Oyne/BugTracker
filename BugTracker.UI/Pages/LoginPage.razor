@page "/login"

<div id="login-page" class="login-page">
    <div id="@(IsRegisterMode ? "register" : "login")-form" class="form">
        @if (!IsRegisterMode)
        {
            <div class="title">Login</div>
            <TextInputRow Id="email-username-input"
                          Title="Email/Username"
                          Placeholder="Enter email/username"
                          ValidationMessage="@EmailUserNameWarning"
                          @bind-Value="UserLogin.EmailUserName" />

            <TextInputRow Id="password-input"
                          Title="Password"
                          Placeholder="Enter password"
                          IsPassword="true"
                          ValidationMessage="@PasswordWarning"
                          @bind-Value="UserLogin.Password" />

            <div class="remebmer-me">
                <input type="checkbox" @bind="RememberMe" /> Remember me
            </div>

            <div>@InvalidLoginDataWarning</div>

            <Button Id="login-button"
                    Text="Login"
                    OnClick="Login" />

            <a id="toggle-register-mode-link" @onclick="ToggleRegisterMode">Don't have an account?</a>
        }
        else
        {
            <div class="title">Registration</div>
            <TextInputRow Id="email-input"
                          Title="Email"
                          Placeholder="Enter email"
                          ValidationMessage="@EmailWarning"
                          @bind-Value="UserRegister.Email" />
            <TextInputRow Id="username-input"
                          Title="Username"
                          Placeholder="Username"
                          ValidationMessage="@UserNameWarning"
                          @bind-Value="UserRegister.UserName" />
            <TextInputRow Id="password-input"
                          Title="Password"
                          Placeholder="Enter password"
                          IsPassword="true"
                          ValidationMessage="@PasswordWarning"
                          @bind-Value="UserRegister.Password" />
            <TextInputRow Id="firstname-input" Title="First name"
                          Placeholder="Enter first name"
                          ValidationMessage="@FirstNameWarning"
                          @bind-Value="UserRegister.FirstName" />
            <TextInputRow Id="lastname-input"
                          Title="Last name"
                          Placeholder="Enter last name"
                          ValidationMessage="@LastNameWarning"
                          @bind-Value="UserRegister.LastName" />

            <Button Id="register-button"
                    Text="Register"
                    OnClick="Register" />
            <a id="toggle-register-mode-link" @onclick="ToggleRegisterMode">Already have an account</a>
        }
    </div>
</div>

@code {
    [Inject] private NavigationService NavigationService { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private AppUsersClient AppUsersClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;

    private AppUserLoginDTO UserLogin { get; set; } = new();
    private AppUserRegisterDTO UserRegister { get; set; } = new();

    private bool RememberMe { get; set; } = false;
    private bool IsRegisterMode { get; set; } = false;

    private string EmailUserNameWarning { get; set; } = string.Empty;
    private string EmailWarning { get; set; } = string.Empty;
    private string UserNameWarning { get; set; } = string.Empty;
    private string PasswordWarning { get; set; } = string.Empty;
    private string FirstNameWarning { get; set; } = string.Empty;
    private string LastNameWarning { get; set; } = string.Empty;
    private string InvalidLoginDataWarning { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        if (UserState.IsAuthenticated)
        {
            NavigationService.NavigateToHomePage();
        }
    }

    private async Task Login()
    {
        ClearLoginWarnings();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(UserLogin.EmailUserName))
        {
            EmailUserNameWarning = GeneralWarnings.FillRequiredField("Email/Username");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UserLogin.Password))
        {
            PasswordWarning = GeneralWarnings.FillRequiredField("Password");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        var loginResponse = await AppUsersClient.Login(UserLogin);

        if (!loginResponse.Success)
        {
            InvalidLoginDataWarning = GeneralWarnings.InvalidLoginData;
            ToastService.ShowToast(new ToastMessage(
            title: loginResponse.Error!,
            message: loginResponse.Message ?? GeneralWarnings.SomethingWentWrong,
            level: ToastLevel.Error));
            return;
        }

        var appUser = loginResponse.Data!;
        await UserState.SetUser(appUser, RememberMe);
        ToastService.ShowToast(UserToastMessages.UserLoggedIn(appUser.FullName));
        NavigationService.NavigateToHomePage();
        return;
    }

    private async Task Register()
    {
        ClearRegisterWarnings();
        bool isValid = true;

        if (string.IsNullOrWhiteSpace(UserRegister.Email))
        {
            EmailWarning = GeneralWarnings.FillRequiredField("Email");
            isValid = false;
        }
        else if (!EmailMethods.IsValid(UserRegister.Email))
        {
            EmailWarning = GeneralWarnings.InvalidInput;
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UserRegister.UserName))
        {
            UserNameWarning = GeneralWarnings.FillRequiredField("Username");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UserRegister.Password))
        {
            PasswordWarning = GeneralWarnings.FillRequiredField("Password");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UserRegister.FirstName))
        {
            FirstNameWarning = GeneralWarnings.FillRequiredField("First name");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UserRegister.LastName))
        {
            LastNameWarning = GeneralWarnings.FillRequiredField("Last name");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        var userCount = await AppUsersClient.GetUserCountAsync();
        var registerResponse = await AppUsersClient.CreateUserAsync(UserRegister);
        if (!registerResponse.Success)
        {
            ToastService.ShowToast(new ToastMessage(
            title: registerResponse.Error!,
            message: registerResponse.Message ?? GeneralWarnings.SomethingWentWrong,
            level: ToastLevel.Error));
            return;
        }

        var appUser = registerResponse.Data!;
        await UserState.SetUser(appUser, RememberMe);
        ToastService.ShowToast(UserToastMessages.UserRegistered(appUser.FullName));
        NavigationService.NavigateToHomePage();
        return;
    }

    private void ToggleRegisterMode()
    {
        ClearLoginFields();
        ClearLoginWarnings();
        ClearRegisterFields();
        ClearRegisterWarnings();
        IsRegisterMode = !IsRegisterMode;
    }

    private void ClearLoginFields()
    {
        UserLogin = new AppUserLoginDTO();
        RememberMe = false;
    }

    private void ClearLoginWarnings()
    {
        EmailUserNameWarning = string.Empty;
        PasswordWarning = string.Empty;
        InvalidLoginDataWarning = string.Empty;
    }

    private void ClearRegisterFields()
    {
        UserRegister = new AppUserRegisterDTO();
    }

    private void ClearRegisterWarnings()
    {
        EmailWarning = string.Empty;
        UserNameWarning = string.Empty;
        PasswordWarning = string.Empty;
        FirstNameWarning = string.Empty;
        LastNameWarning = string.Empty;
    }
}
