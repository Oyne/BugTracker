@page "/bug/{Id:int}"

@if (IsLoading)
{
    <div>Loading...</div>
}
else
{
    if (Bug == null)
    {
        <div>Bug is not found</div>
    }
    else
    {
        <div hidden="@IsEditMode">
            <div>Title: @Bug.Title</div>
            <pre>Descirption: @Bug.Description</pre>
            <div>Creation date: @Bug.CreationDate.ToLocalTime().ToString("f")</div>
            <div>Last edit date: @Bug.LastEditDateTime.ToLocalTime().ToString("f")</div>
            <div>Priority: @Bug.Priority?.Name</div>
            <div>Status: @Bug.Status?.Name</div>
            <div>Category: @Bug.Category?.Name</div>
            <div>Author: @Bug.Author?.FirstName @Bug.Author?.LastName</div>
            <div>Last editor: @Bug.LastEditor?.FirstName @Bug.LastEditor?.LastName</div>
            <button @onclick="ToggleEditMode">Edit</button>
        </div>

        <div hidden="@(!IsEditMode)">
            <TextInputRow Title="Name"
                          Placeholder="Enter bug name"
                          @bind-Value="EditBug!.Title"></TextInputRow>

            <TextInputArea Title="Description"
                           Placeholder="Enter bug description"
                           @bind-Value="EditBug.Description"></TextInputArea>


            <DropDownList Title="Priority"
                          Items="@Priorities"
                          @bind-Selected="EditBug.Priority"></DropDownList>

            <DropDownList Title="Status"
                          Items="@Statuses"
                          @bind-Selected="EditBug.Status"></DropDownList>

            <DropDownList Title="Category"
                          Items="@Categories"
                          @bind-Selected="EditBug.Category"></DropDownList>

            <button @onclick="SaveChanges">Save</button>
            <button @onclick="CancelChanges">Cancel</button>
        </div>
    }
}

@code {
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private BugClient BugClient { get; set; } = default!;
    [Inject] private PriorityClient PriorityClient { get; set; } = default!;
    [Inject] private StatusClient StatusClient { get; set; } = default!;
    [Inject] private CategoryClient CategoryClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;    

    [Parameter]
    public int Id { get; set; }

    private bool IsLoading = true;
    private bool IsEditMode { get; set; } = false;

    private Bug? Bug;
    private Bug? EditBug;

    private List<Priority>? Priorities { get; set; }
    private List<Status>? Statuses { get; set; }
    private List<Category>? Categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        IsLoading = false;
    }

    private async Task LoadDataAsync()
    {
        Bug = await BugClient.GetByIdAsync(Id);
        if (Bug != null)
        {
            EditBug = HelperMethods.CloneBug(Bug);
        }

        Priorities = await PriorityClient.GetAllAsync();
        Statuses = await StatusClient.GetAllAsync();
        Categories = await CategoryClient.GetAllAsync();
    }

    private void ToggleEditMode() => IsEditMode = !IsEditMode;

    private async Task SaveChanges()
    {
        if (EditBug != null)
        {
            EditBug.LastEditorId = UserState.CurrentUser?.Id;
            var response = await BugClient.UpdateAsync(EditBug);
            ToastService.ShowToast(new ToastMessage(
               message: "Bug updated succesfully",
               level: ToastLevel.Success));

            await LoadDataAsync();
            IsEditMode = false;
        }
    }

    private void CancelChanges()
    {
        EditBug = HelperMethods.CloneBug(Bug);
        IsEditMode = !IsEditMode;
    }
}
