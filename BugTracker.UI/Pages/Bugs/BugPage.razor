@page "/bug/{Id:int}"

@if (IsLoading)
{
    <div>Loading...</div>
}
else
{
    if (Bug == null)
    {
        <div>Bug is not found</div>
    }
    else
    {
        <div hidden="@IsEditMode">
            <div>Title: @Bug.Title</div>
            <pre>Descirption: @Bug.Description</pre>
            <div>Creation date: @Bug.CreationDate.ToLocalTime().ToString("f")</div>
            <div>Last edit date: @Bug.LastEditDateTime.ToLocalTime().ToString("f")</div>
            <div>Logged time: @Bug.LoggedTime.ToString()</div>
            <div>Priority: @Bug.Priority?.Name</div>
            <div>Status: @Bug.Status?.Name</div>
            <div>Category: @Bug.Category?.Name</div>
            <div>Author: @Bug.Author?.FirstName @Bug.Author?.LastName</div>
            <div>Last editor: @Bug.LastEditor?.FirstName @Bug.LastEditor?.LastName</div>
            <div>Assignee: @Bug.Assignee?.FirstName @Bug.Assignee?.LastName</div>
            <button @onclick="ToggleEditMode">Edit</button>
        </div>

        <div hidden="@(!IsEditMode)">
            <TextInputRow Title="Name"
                          Placeholder="Enter bug title"
                          ValidationMessage="@TitleWarning"
                          @bind-Value="UpdateBug.Title"></TextInputRow>

            <TextInputArea Title="Description"
                           Placeholder="Enter bug description"
                           ValidationMessage="@DescriptionWarning"
                           @bind-Value="UpdateBug.Description"></TextInputArea>


            <ISelectableItemDropdown Title="Priority"
                                     Items="@Priorities"
                                     @bind-SelectedId="UpdateBug.PriorityId"></ISelectableItemDropdown>

            <ISelectableItemDropdown Title="Status"
                                     Items="@Statuses"
                                     @bind-SelectedId="UpdateBug.StatusId"></ISelectableItemDropdown>

            <ISelectableItemDropdown Title="Category"
                                     Items="@Categories"
                                     @bind-SelectedId="UpdateBug.CategoryId"></ISelectableItemDropdown>

            <UserDropdown Title="Assignee"
                          Users="Users"
                          @bind-SelectedId="UpdateBug.AssigneeId"></UserDropdown>

            <button @onclick="SaveChanges"> Save </button>
            <button @onclick="CancelChanges"> Cancel </button>
        </div>
    }
}

@code {
    [Inject] private NavigationService NavigationService { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private BugsClient BugsClient { get; set; } = default!;
    [Inject] private PrioritiesClient PrioritiesClient { get; set; } = default!;
    [Inject] private StatusesClient StatusesClient { get; set; } = default!;
    [Inject] private CategoriesClient CategoriesClient { get; set; } = default!;
    [Inject] private AppUsersClient AppUsersClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    private bool IsLoading = true;
    private bool IsEditMode { get; set; } = false;
    private bool IsEditDataLoaded { get; set; } = false;

    private BugDTO Bug = default!;
    private BugUpdateDTO UpdateBug = default!;

    private List<PriorityDTO> Priorities { get; set; } = new();
    private List<StatusDTO> Statuses { get; set; } = new();
    private List<CategoryDTO> Categories { get; set; } = new();
    private List<AppUserDTO> Users { get; set; } = new();

    private string TitleWarning { get; set; } = string.Empty;
    private string DescriptionWarning { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadBugDataAsync();
        IsLoading = false;
    }

    private async Task LoadBugDataAsync()
    {
        var response = await BugsClient.GetBugByIdAsync(Id);
        Bug = response.Data;
        if (Bug == null)
        {
            ToastService.ShowToast(BugToastMessages.BugNotFound);
            NavigationService.NavigateToHomePage();
            return;
        }
        UpdateBug = Bug.CopyToUpdateDTO();
    }

    private async Task LoadEditDataAsync()
    {
        UpdateBug = Bug.CopyToUpdateDTO();
        var prioritiesResponse = await PrioritiesClient.GetAllPrioritiesAsync();
        Priorities = prioritiesResponse.Data;
        var statusesResponse = await StatusesClient.GetAllStatusesAsync();
        Statuses = statusesResponse.Data;
        var categoriesResponse = await CategoriesClient.GetAllCategoriesAsync();
        Categories = categoriesResponse.Data;
        var usersResponse = await AppUsersClient.GetAllUsersAsync();
        Users = usersResponse.Data;
    }

    private async Task ToggleEditMode()
    {
        if (!IsEditDataLoaded)
        {
            IsLoading = true;
            await LoadEditDataAsync();
            IsEditDataLoaded = true;
            IsLoading = false;
        }
        IsEditMode = !IsEditMode;
    }

    private async Task SaveChanges()
    {
        TitleWarning = string.Empty;
        DescriptionWarning = string.Empty;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(UpdateBug.Title))
        {
            TitleWarning = GeneralWarnings.FillRequiredField("Title");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UpdateBug.Description))
        {
            DescriptionWarning = GeneralWarnings.FillRequiredField("Description");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        UpdateBug.LastEditorId = UserState.CurrentUser!.Id;
        var response = await BugsClient.UpdateBugAsync(UpdateBug);
        if (!response.Success)
        {
            ToastService.ShowToast(new ToastMessage(
                title: response.Error!,
                message: response.Message ?? GeneralWarnings.SomethingWentWrong,
            level: ToastLevel.Error));
            return;
        }
        Bug = response.Data;

        ToastService.ShowToast(BugToastMessages.BugUpdated);
        IsEditMode = false;
    }

    private void CancelChanges()
    {
        UpdateBug = Bug.CopyToUpdateDTO();
        IsEditMode = !IsEditMode;
    }
}
