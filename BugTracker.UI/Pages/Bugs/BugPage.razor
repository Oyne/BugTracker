@page "/bug/{Id:int}"

@if (!LoaderService.IsLoading)
{
    if (Bug == null)
    {
        <div>Bug is not found</div>
    }
    else
    {
        <div class="bug-page">
            <TextInputRow Title="Name"
                          Placeholder="Enter bug title"
                          ValidationMessage="@TitleWarning"
                          @bind-Value="UpdateBug.Title"
                          Disabled="@(!IsEditMode)" />

            <TextInputArea Title="Description"
                           Placeholder="Enter bug description"
                           ValidationMessage="@DescriptionWarning"
                           @bind-Value="UpdateBug.Description"
                           Disabled="@(!IsEditMode)" />

            <div class="dropdown-wrapper">
                <Dropdown @ref="PriorityDropdown"
                          Id="bug-priority-dropdown"
                          Title="Priority"
                          Items="@Priorities"
                          @bind-SelectedId="UpdateBug.PriorityId"
                          Disabled="@(!IsEditMode)" />

                <Dropdown @ref="StatusDropdown"
                          Id="bug-status-dropdown"
                          Title="Status"
                          Items="@Statuses"
                          @bind-SelectedId="UpdateBug.StatusId"
                          Disabled="@(!IsEditMode)" />

                <Dropdown @ref="CategoryDropdown"
                          Id="bug-category-dropdown"
                          Title="Category"
                          Items="@Categories"
                          @bind-SelectedId="UpdateBug.CategoryId"
                          Disabled="@(!IsEditMode)" />

                <Dropdown @ref="AssigneeDropdown"
                          Id="bug-assigne-dropdown"
                          Title="Assignee"
                          Items="@Users"
                          @bind-SelectedId="UpdateBug.AssigneeId"
                          Disabled="@(!IsEditMode)" />
            </div>
            @if (!IsEditMode)
            {
                <Button Id="edit-button"
                        Text="Edit"
                        OnClick="ToggleEditMode" />
            }
            else
            {
                <Button Id="save-changes-button"
                        Text="Save changes"
                        OnClick="SaveChanges" />

                <Button Id="cancel-changes-button"
                        Text="Cancel changes"
                        OnClick="CancelChanges" />
            }
        </div>
    }
}

@code {
    [Inject] private NavigationService NavigationService { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private LoaderService LoaderService { get; set; } = default!;
    [Inject] private BugsClient BugsClient { get; set; } = default!;
    [Inject] private PrioritiesClient PrioritiesClient { get; set; } = default!;
    [Inject] private StatusesClient StatusesClient { get; set; } = default!;
    [Inject] private CategoriesClient CategoriesClient { get; set; } = default!;
    [Inject] private AppUsersClient AppUsersClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    private bool IsEditMode { get; set; } = false;
    private bool IsEditDataLoaded { get; set; } = false;

    private BugDTO Bug = default!;
    private BugUpdateDTO UpdateBug = default!;

    private List<DropdownItemDTO> Priorities { get; set; } = new();
    private List<DropdownItemDTO> Statuses { get; set; } = new();
    private List<DropdownItemDTO> Categories { get; set; } = new();
    private List<DropdownItemDTO> Users { get; set; } = new();
    private Dropdown? PriorityDropdown;
    private Dropdown? StatusDropdown;
    private Dropdown? CategoryDropdown;
    private Dropdown? AssigneeDropdown;

    private string TitleWarning { get; set; } = string.Empty;
    private string DescriptionWarning { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UserState.EnsureAuthenticatedAsync(NavigationService);
        await LoadBugDataAsync();
        await LoadEditDataAsync();
    }

    private void CloseDropdowns()
    {
        PriorityDropdown!.Close();
        StatusDropdown!.Close();
        CategoryDropdown!.Close();
        AssigneeDropdown!.Close();
    }

    private async Task LoadBugDataAsync()
    {
        LoaderService.Show();
        var response = await BugsClient.GetBugByIdAsync(Id);
        Bug = response.Data;
        if (Bug == null)
        {
            ToastService.ShowToast(BugToastMessages.BugNotFound);
            NavigationService.NavigateToHomePage();
            return;
        }
        UpdateBug = Bug.CopyToUpdateDTO();
        LoaderService.Hide();
    }

    private async Task LoadEditDataAsync()
    {
        var prioritiesResponse = await PrioritiesClient.GetAllPrioritiesAsync();
        Priorities = prioritiesResponse.Data.ToDTOList();
        var statusesResponse = await StatusesClient.GetAllStatusesAsync();
        Statuses = statusesResponse.Data.ToDTOList();
        var categoriesResponse = await CategoriesClient.GetAllCategoriesAsync();
        Categories = categoriesResponse.Data.ToDTOList();
        var usersResponse = await AppUsersClient.GetAllUsersAsync();
        Users = usersResponse.Data.ToDTOList();
    }

    private void ToggleEditMode()
    {
        CloseDropdowns();
        IsEditMode = !IsEditMode;
    }

    private async Task SaveChanges()
    {
        TitleWarning = string.Empty;
        DescriptionWarning = string.Empty;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(UpdateBug.Title))
        {
            TitleWarning = GeneralWarnings.FillRequiredField("Title");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(UpdateBug.Description))
        {
            DescriptionWarning = GeneralWarnings.FillRequiredField("Description");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        UpdateBug.LastEditorId = UserState.CurrentUser!.Id;
        var response = await BugsClient.UpdateBugAsync(UpdateBug);
        if (!response.Success)
        {
            ToastService.ShowToast(new ToastMessage(
                title: response.Error!,
                message: response.Message ?? GeneralWarnings.SomethingWentWrong,
            level: ToastLevel.Error));
            return;
        }
        Bug = response.Data;

        ToastService.ShowToast(BugToastMessages.BugUpdated);
        CloseDropdowns();
        IsEditMode = false;
    }

    private void CancelChanges()
    {
        UpdateBug = Bug.CopyToUpdateDTO();
        IsEditMode = !IsEditMode;
        CloseDropdowns();
        IsEditMode = false;
    }
}
