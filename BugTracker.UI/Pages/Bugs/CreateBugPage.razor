@page "/create-bug"

@if (IsLoading)
{
    <div>Loading...</div>
}
else
{
    <TextInputRow Title="Title"
                  Placeholder="Enter bug title"
                  ValidationMessage="@TitleWarning"
                  @bind-Value="BugCreate.Title"></TextInputRow>

    <TextInputArea Title="Description"
                   Placeholder="Enter bug description"
                   ValidationMessage="@DescriptionWarning"
                   @bind-Value="BugCreate.Description"></TextInputArea>

    <ISelectableItemDropdown Title="Priority"
                             Items="Priorities"
                             @bind-Selected="BugCreate.PriorityId"></ISelectableItemDropdown>

    <ISelectableItemDropdown Title="Status"
                             Items="@(Statuses!)"
                             @bind-Selected="Status"></ISelectableItemDropdown>

    <ISelectableItemDropdown Title="Category"
                             Items="@(Categories!)"
                             @bind-Selected="Category"></ISelectableItemDropdown>

    <UserDropdown Title="Assignee"
                  Users="@(Users!)"
                  @bind-Selected="Assignee"></UserDropdown>

    <button @onclick="CreateBug">Create bug</button>
}

@code {
    [Inject] private NavigationService NavigationService { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private BugsClient BugsClient { get; set; } = default!;
    [Inject] private PrioritiesClient PrioritiesClient { get; set; } = default!;
    [Inject] private StatusesClient StatusesClient { get; set; } = default!;
    [Inject] private CategoriesClient CategoriesClient { get; set; } = default!;
    [Inject] private AppUsersClient AppUsersClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;

    private bool IsLoading = true;

    private List<PriorityDTO> Priorities { get; set; } = new();
    private List<StatusDTO> Statuses { get; set; } = new();
    private List<CategoryDTO> Categories { get; set; } = new();
    private List<AppUserDTO> Users { get; set; } = new(); 

    private BugCreateDTO BugCreate { get; } = new ();
    private string TitleWarning { get; set; } = string.Empty;
    private string DescriptionWarning { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
        IsLoading = false;
    }

    private async Task LoadDataAsync()
    {
        var prioritiesResponse = await PrioritiesClient.GetAllPrioritiesAsync();
        Priorities = prioritiesResponse.Data;
        var statusesResponse = await StatusesClient.GetAllStatusesAsync();
        Statuses = statusesResponse.Data;
        var categoriesResponse = await CategoriesClient.GetAllCategoriesAsync();
        Categories = categoriesResponse.Data;
        var usersResponse = await AppUsersClient.GetAllUsersAsync();
        Users = usersResponse.Data;
    }

    private async Task CreateBug()
    {
        TitleWarning = string.Empty;
        DescriptionWarning = string.Empty;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Title))
        {
            TitleWarning = GeneralWarnings.FillRequiredField("Title");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Description))
        {
            DescriptionWarning = GeneralWarnings.FillRequiredField("Description");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        var bugWithSameTitle = await BugsClient.GetByTitleAsync(Title);
        if (bugWithSameTitle != null)
        {
            ToastService.ShowToast(BugToastMessages.BugWithTitleAlreadyExists(Title));
            return;
        }

        Bug bug = new Bug
        {
            Title = this.Title,
            Description = this.Description,
            PriorityId = this.Priority?.Id,
            StatusId = this.Status?.Id,
            CategoryId = this.Category?.Id,
            AssigneeId = this.Assignee?.Id,
            AuthorId = UserState.CurrentUser?.Id,
            LastEditorId = UserState.CurrentUser?.Id
        };

        var createdBug = await BugsClient.CreateAsync(bug);
        if (createdBug != null)
        {
            ToastService.ShowToast(BugToastMessages.BugCreated(bug.Title));
            NavigationService.NavigateToHomePage();
            return;
        }

        ToastService.ShowToast(BugToastMessages.BugCreationError);
    }
}
