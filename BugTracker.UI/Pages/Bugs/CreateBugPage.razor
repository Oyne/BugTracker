@page "/create-bug"
<PageTitle>Create bug page</PageTitle>

@if (!LoaderService.IsLoading)
{
    <div class="create-bug-page">
        <TextInputRow Id="bug-title-input"
                      Title="Title"
                      Placeholder="Enter bug title"
                      ValidationMessage="@TitleWarning"
                      @bind-Value="CreateBug.Title" />

        <TextInputArea Id="bug-description-input"
                       Title="Description"
                       Placeholder="Enter bug description"
                       ValidationMessage="@DescriptionWarning"
                       @bind-Value="CreateBug.Description" />

        <div class="dropdown-wrapper">
            <Dropdown Id="bug-priority-dropdown"
                      Title="Priority"
                      Items="@Priorities"
                      @bind-SelectedId="CreateBug.PriorityId" />

            <Dropdown Id="bug-status-dropdown"
                      Title="Status"
                      Items="@Statuses"
                      @bind-SelectedId="CreateBug.StatusId" />

            <Dropdown Id="bug-category-dropdown"
                      Title="Category"
                      Items="@Categories"
                      @bind-SelectedId="CreateBug.CategoryId" />

            <Dropdown Id="bug-assigne-dropdown"
                      Title="Assignee"
                      Items="@Users"
                      @bind-SelectedId="CreateBug.AssigneeId" />
        </div>

        <Button Id="create-bug-button"
                Text="Create bug"
                OnClick="Create" />
    </div>

}

@code {
    [Inject] private NavigationService NavigationService { get; set; } = default!;
    [Inject] private UserState UserState { get; set; } = default!;
    [Inject] private LoaderService LoaderService { get; set; } = default!;
    [Inject] private BugsClient BugsClient { get; set; } = default!;
    [Inject] private PrioritiesClient PrioritiesClient { get; set; } = default!;
    [Inject] private StatusesClient StatusesClient { get; set; } = default!;
    [Inject] private CategoriesClient CategoriesClient { get; set; } = default!;
    [Inject] private AppUsersClient AppUsersClient { get; set; } = default!;
    [Inject] private ToastService ToastService { get; set; } = default!;

    private List<DropdownItemDTO> Priorities { get; set; } = new();
    private List<DropdownItemDTO> Statuses { get; set; } = new();
    private List<DropdownItemDTO> Categories { get; set; } = new();
    private List<DropdownItemDTO> Users { get; set; } = new();

    private BugCreateDTO CreateBug { get; } = new();
    private string TitleWarning { get; set; } = string.Empty;
    private string DescriptionWarning { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UserState.EnsureAuthenticatedAsync(NavigationService);
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        LoaderService.Show();
        var prioritiesResponse = await PrioritiesClient.GetAllPrioritiesAsync();
        Priorities = prioritiesResponse.Data.ToDTOList();
        var statusesResponse = await StatusesClient.GetAllStatusesAsync();
        Statuses = statusesResponse.Data.ToDTOList();
        var categoriesResponse = await CategoriesClient.GetAllCategoriesAsync();
        Categories = categoriesResponse.Data.ToDTOList();
        var usersResponse = await AppUsersClient.GetAllUsersAsync();
        Users = usersResponse.Data.ToDTOList();
        LoaderService.Hide();
    }

    private async Task Create()
    {
        TitleWarning = string.Empty;
        DescriptionWarning = string.Empty;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(CreateBug.Title))
        {
            TitleWarning = GeneralWarnings.FillRequiredField("Title");
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(CreateBug.Description))
        {
            DescriptionWarning = GeneralWarnings.FillRequiredField("Description");
            isValid = false;
        }

        if (!isValid)
        {
            ToastService.ShowToast(GeneralToastMessages.FillRequiredFields);
            return;
        }

        CreateBug.AuthorId = UserState.CurrentUser!.Id;
        CreateBug.LastEditorId = UserState.CurrentUser!.Id;
        var response = await BugsClient.CreateBugAsync(CreateBug);
        if (!response.Success)
        {
            ToastService.ShowToast(new ToastMessage(
                title: response.Error!,
                message: response.Message ?? GeneralWarnings.SomethingWentWrong,
            level: ToastLevel.Error));
            return;
        }

        ToastService.ShowToast(BugToastMessages.BugCreated());
        NavigationService.NavigateToBugPage(response.Data.Id);
    }
}
